import gmsh
import numpy as np
from numpy.linalg import norm

from scipy.stats import halfnorm
import SpatialFiberModified as sf

gmsh.initialize()

gmsh.model.add("fibers_test")

seed = 100

RG = np.random.default_rng(seed)

width = 3
height = 3
depth = 3
diam = 0.15

x_min = -width / 2
x_max = width / 2

y_min = -height / 2
y_max = height / 2

z_min = -depth / 2
z_max = depth / 2

fibers_num = 100

# xy = np.zeros((fibers_num, 2))
# alpha = np.zeros((fibers_num, 1))
# beta = np.zeros((fibers_num, 1))

fibers = [None] * fibers_num
intersecting_vec = np.zeros(fibers_num - 1)
intersecting = False

for i in range(fibers_num):

    xy = RG.uniform(-1, 1, [1, 2]) @ np.array([[width / 2, 0], [0, height / 2]])
    xy = xy.flatten()
    xy = xy.tolist()
    alpha = RG.uniform(0, 2 * np.pi, [1, 1])
    beta = np.pi / 2 - (halfnorm.rvs(size=[1, 1]) * 25 * np.pi / 180 + 10 * np.pi / 180)

    fibers[i] = sf.generate_fiber_by_angles(xy, alpha, beta, [z_min, z_max], diam)
    print(i)

    if i > 0:

        for j in range(i - 1):
            # dist, t_a, t_b = sf.sk_min_dist(fibers[i], fibers[j])
            intersecting_vec[j] = (sf.check_sk_intersection(fibers[i], fibers[j]))
            print(intersecting_vec)
            intersecting = any(intersecting_vec)
            print(intersecting)

        while intersecting:

            gmsh.model.occ.remove([(3, fibers[i].body_ind)], recursive=True)
            gmsh.model.occ.synchronize()

            print("Resolving Intersection")
            xy = RG.uniform(-1, 1, [1, 2]) @ np.array([[width / 2, 0], [0, height / 2]])
            xy = xy.flatten()
            xy = xy.tolist()
            alpha = RG.uniform(0, 2 * np.pi, [1, 1])
            beta = np.pi / 2 - (halfnorm.rvs(size=[1, 1]) * 25 * np.pi / 180 + 10 * np.pi / 180)

            fibers[i] = sf.generate_fiber_by_angles(xy, alpha, beta, [z_min, z_max], diam)
            for k in range(i - 1):
                # dist, t_a, t_b = sf.sk_min_dist(fibers[i], fibers[j])
                intersecting_vec[k] = (sf.check_sk_intersection(fibers[i], fibers[k]))
                intersecting = any(intersecting_vec)

    if i == fibers_num - 1:
        gmsh.model.occ.synchronize()

        gmsh.option.setNumber("Mesh.MeshSizeFromCurvature", 5)
        gmsh.option.setNumber("Mesh.MeshSizeMax", 0.2)
        gmsh.option.setNumber("Mesh.MeshSizeMin", 0.1)
        gmsh.option.setNumber("Mesh.MaxNumThreads3D", 4)
        gmsh.option.setNumber("Mesh.ElementOrder", 2)
        gmsh.option.setNumber("Mesh.Algorithm3D", 9)
        gmsh.option.setNumber("Mesh.SubdivisionAlgorithm", 2)
        # gmsh.option.setNumber("Mesh.RandomFactor", 20)
        gmsh.model.mesh.generate(3)

        gmsh.write("non-intersecting fibers.vtk")

        gmsh.finalize()
